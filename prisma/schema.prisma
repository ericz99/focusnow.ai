// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("LOCAL_DATABASE_URL")
}

enum PlanType {
  free_plan
  standard_plan
  pro_plan
}

enum UsageType {
  embedding
  chat_message
}

enum Visibility {
  public
  private
}

enum Status {
  active
  inactive
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}

enum PricingPlanInterval {
  month
  year
}

enum UserType {
  interviewer
  interviewee
  copilot
}

enum DocumentType {
  resume
  cover_letter
}

enum PricingType {
  one_time
  recurring
}

model User {
  id             String           @id @default(cuid())
  supaUserId     String?          @unique
  stripeUserId   String?          @unique
  name           String?
  email          String           @unique
  password       String?
  subs           Subscription[]
  credit         Int              @default(0)
  sessions       Session[]
  documents      Document[]
  jobs           Job[]
  paymentHistory PaymentHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Product {
  id          String   @id
  active      Boolean
  name        String
  description String?
  image       String
  metadata    Json?
  price       Price?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Price {
  id             String              @id
  productId      String              @unique
  product        Product             @relation(fields: [productId], references: [id])
  active         Boolean
  description    String?
  unitAmount     Float
  currency       String
  type           PricingType         @default(recurring)
  interval       PricingPlanInterval @default(month)
  intervalCount  Int                 @default(1)
  trialPeriodDay Int
  metadata       Json?
  subs           Subscription[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Subscription {
  id                 String             @id
  user               User               @relation(fields: [userId], references: [id])
  userId             String
  status             SubscriptionStatus
  metadata           Json?
  price              Price              @relation(references: [id], fields: [priceId])
  priceId            String
  cancelAtPeriodEnd  Boolean
  currentPeriodStart DateTime?          @default(now())
  currentPeriodEnd   DateTime?
  endAt              DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model PaymentHistory {
  id                      String   @id @default(cuid())
  stripeCheckoutSessionId String   @unique
  user                    User     @relation(fields: [userId], references: [id])
  userId                  String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Job {
  id             String  @id @default(cuid())
  position       String
  company        String
  companyDetail  String  @db.LongText
  jobDescription String  @db.LongText
  isArchived     Boolean @default(false)
  userId         String
  user           User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Session {
  id             String       @id @default(cuid())
  name           String
  isActive       Boolean      @default(false)
  isFinished     Boolean      @default(false)
  totalTime      String
  startTime      String?
  endTime        String?
  transcripts    Transcript[]
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  resumeId       String
  coverLetterId  String?
  jobId          String
  additionalInfo String?      @db.LongText
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([userId])
}

model Transcript {
  id        String   @id @default(cuid())
  type      UserType
  content   String   @db.LongText
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId String
  metadatas Json?
  commands  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
}

model Usage {
  id              String   @id @default(cuid())
  promptToken     Int
  completionToken Int
  totalToken      Int
  request         Request?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Request {
  id        String           @id @default(cuid())
  openApiId String?
  model     String
  usage     Usage?           @relation(fields: [usageId], references: [id])
  usageId   String?          @unique
  role      String
  content   String           @db.LongText
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  feedback  RequestFeedback?
}

model RequestFeedback {
  id          String   @id @default(cuid())
  request     Request  @relation(fields: [requestId], references: [id])
  requestId   String   @unique
  badResponse Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([requestId])
}

model Document {
  id             String          @id @default(cuid())
  fileId         String          @unique
  fileExt        String
  name           String
  type           DocumentType
  isPrimary      Boolean         @default(false)
  documentChunks DocumentChunk[]
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model DocumentChunk {
  id         String    @id @default(cuid())
  fileId     String    @unique
  chuckIndex Int
  content    String    @db.LongText
  tokens     Int
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([documentId])
}
