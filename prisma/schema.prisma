// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("LOCAL_DATABASE_URL")
}

enum PlanType {
  free_plan
  standard_plan
  pro_plan
}

enum UsageType {
  embedding
  chat_message
}

enum Visibility {
  public
  private
}

enum Status {
  active
  inactive
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}

enum PricingPlanInterval {
  month
  year
}

enum Role {
  owner
  admin
  member
}

model User {
  id           String         @id @default(cuid())
  supaUserId   String?        @unique
  stripeUserId String?        @unique
  name         String?
  email        String         @unique
  password     String?
  owners       Team[]
  teams        TeamMember[]
  subs         Subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Product {
  id          String   @id
  active      Boolean
  name        String
  description String?
  image       String
  metadata    Json?
  price       Price?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Price {
  id             String              @id
  productId      String              @unique
  product        Product             @relation(fields: [productId], references: [id])
  active         Boolean
  description    String?
  unitAmount     BigInt
  currency       String
  type           String              @default("recurring")
  interval       PricingPlanInterval @default(month)
  intervalCount  Int                 @default(1)
  trialPeriodDay Int
  metadata       Json?
  subs           Subscription[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Subscription {
  id                 String             @id
  user               User               @relation(fields: [userId], references: [id])
  userId             String
  status             SubscriptionStatus
  metadata           Json?
  price              Price              @relation(references: [id], fields: [priceId])
  priceId            String
  cancelAtPeriodEnd  Boolean
  currentPeriodStart DateTime?          @default(now())
  currentPeriodEnd   DateTime?
  endAt              DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  active             Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Team {
  id         String       @id @default(cuid())
  slug       String?      @unique
  name       String
  owner      User         @relation(fields: [ownerId], references: [id])
  ownerId    String
  members    TeamMember[]
  invites    Invite[]
  assistants Assistant[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([ownerId])
}

model TeamMember {
  id        String              @id @default(cuid())
  user      User                @relation(fields: [userId], references: [id])
  userId    String
  team      Team                @relation(fields: [teamId], references: [id])
  teamId    String
  roles     TeamMemberOnRoles[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([teamId])
  @@index([userId])
}

model TeamMemberOnRoles {
  id           String     @id @default(cuid())
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String
  role         Role

  @@index([teamMemberId])
}

model Invite {
  id             String    @id @default(cuid())
  recipientEmail String    @unique
  code           String    @unique @default(cuid())
  hasExpiration  Boolean   @default(false)
  accepted       Boolean   @default(false)
  expiredAt      DateTime?
  team           Team      @relation(fields: [teamId], references: [id])
  teamId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model Usage {
  id              String   @id @default(cuid())
  promptToken     Int
  completionToken Int
  totalToken      Int
  request         Request?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Request {
  id                     String                @id @default(cuid())
  openApiId              String?
  model                  String
  usage                  Usage?                @relation(fields: [usageId], references: [id])
  usageId                String?               @unique
  role                   String
  content                String                @db.LongText
  assistantChatHistory   AssistantChatHistory? @relation(fields: [assistantChatHistoryId], references: [id])
  assistantChatHistoryId String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  feedback               RequestFeedback?

  @@index([assistantChatHistoryId])
}

// NOT DONE
model RequestFeedback {
  id          String   @id @default(cuid())
  request     Request  @relation(fields: [requestId], references: [id])
  requestId   String   @unique
  badResponse Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([requestId])
}

model Assistant {
  id                   String                 @id @default(cuid())
  slug                 String?                @unique
  name                 String
  visibility           Visibility             @default(private)
  color                String                 @default("#000000")
  iconUrl              String?
  status               Status                 @default(inactive)
  model                String                 @default("gpt-3.5-turbo-0125")
  welcomeMessage       String?
  selectedSystemPrompt String?                @default("default")
  systemPrompt         String?                @db.LongText
  team                 Team?                  @relation(fields: [teamId], references: [id])
  teamId               String?
  chatHistory          AssistantChatHistory[]
  documents            Document[]
  folders              Folder[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt

  @@index([teamId])
}

model AssistantChatHistory {
  id          String     @id @default(cuid())
  name        String
  requests    Request[]
  assistant   Assistant? @relation(fields: [assistantId], references: [id])
  assistantId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([assistantId])
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  description String
  assistant   Assistant? @relation(fields: [assistantId], references: [id])
  assistantId String?
  documents   Document[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([assistantId])
}

model Document {
  id             String          @id @default(cuid())
  fileId         String          @unique
  fileExt        String
  name           String
  assistant      Assistant?      @relation(fields: [assistantId], references: [id])
  assistantId    String?
  folder         Folder?         @relation(fields: [folderId], references: [id])
  folderId       String?
  documentChunks DocumentChunk[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([assistantId])
  @@index([folderId])
}

model DocumentChunk {
  id         String    @id @default(cuid())
  fileId     String    @unique
  chuckIndex Int
  content    String    @db.LongText
  tokens     Int
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([documentId])
}
